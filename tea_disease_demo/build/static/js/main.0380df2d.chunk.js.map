{"version":3,"sources":["routes/Photo/Photo.js","routes/Cropper/Cropper.js","routes/router.js","routes/Result/Result.js","serviceWorker.js","index.js"],"names":["Photo","props","_this","Object","classCallCheck","this","_super","call","onClose","key","setState","defineProperty","state","e","file","target","files","history","push","pathname","query","_this2","_react_16_13_1_react_default","a","createElement","style","height","className","type","name","onChange","photo","React","Component","CropperPic","imgSrc","location","fileReader","FileReader","onload","dataURL","result","window","innerHeight","readAsDataURL","that","refs","cropper","getCroppedCanvas","width","resultpic","toDataURL","toBlob","_ref","asyncToGenerator","regenerator_default","mark","_callee","blob","formData","resp","responseJson","wrap","_context","prev","next","FormData","append","toast_default","loading","console","log","fetch","method","headers","body","sent","json","hide","results","stop","_x","apply","arguments","_this3","react_cropper_default","src","ref","viewMode","cropBoxMovable","cropBoxResizable","dragMode","aspectRatio","button_default","inline","onClick","submit","routes","path","component","exact","Result","resultPic","objectSpread","replace","nav_bar_default","mode","icon","icon_default","onLeftClick","backgroundImage","concat","carousel_default","autoplay","infinite","dots","map","val","margin","score","Boolean","hostname","match","ReactDOM","render","react_router_dom","renderRoutes","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gpBAGqBA,0CACjB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAI,EAAAC,KAAAF,KAAMJ,IAKVO,QAAU,SAAAC,GAAG,OAAI,WACbP,EAAKQ,SAALP,OAAAQ,EAAA,EAAAR,CAAA,GACGM,GAAM,MANTP,EAAKU,MAAQ,GAFEV,oDAWbW,GAGF,GAAIA,EAAG,CACH,IAAIC,EAAOD,EAAEE,OAAOC,MAAM,GAa1BX,KAAKJ,MAAMgB,QAAQC,KAAK,CAACC,SAAS,WAAWC,MAAM,CAACN,KAAKA,uCAIxD,IAAAO,EAAAhB,KACL,OACIiB,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,OAAO,SAChBJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,YASPL,EAAAC,EAAAC,cAAA,OAAMG,UAAU,QAChBL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,OAAb,0DAEAL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,OAAb,8FAUQL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,cACXL,EAAAC,EAAAC,cAAA,SAAOG,UAAU,UAAUC,KAAK,OAAOC,KAAK,QAAQC,SAAU,SAACjB,GAAD,OAAOQ,EAAKU,MAAMlB,MADpF,wCA1DGmB,IAAMC,mjBCEpBC,0CACjB,SAAAA,EAAYjC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6B,IACfhC,EAAAI,EAAAC,KAAAF,KAAMJ,IACDW,MAAQ,CACTuB,OAAO,KACPT,OAAO,EACPZ,KAAK,MALMZ,kEAQC,IAAAmB,EAAAhB,KAChB,GAAGA,KAAKJ,MAAMmC,SAAShB,MAAM,CACzB,IAAMiB,EAAa,IAAIC,WACvBD,EAAWE,OAAS,SAAC1B,GACrB,IAAM2B,EAAU3B,EAAEE,OAAO0B,OACzBpB,EAAKX,SAAS,CAACyB,OAAQK,EAAQd,OAAOgB,OAAOC,YAAY,GAAG7B,KAAKO,EAAKpB,MAAMmC,SAAShB,SAErFiB,EAAWO,cAAcvC,KAAKJ,MAAMmC,SAAShB,MAAMN,WAEnDT,KAAKJ,MAAMgB,QAAQC,KAAK,CAACC,SAAS,yJAKlC0B,EAAOxC,KACPoC,EAASpC,KAAKyC,KAAKC,QAAQC,iBAAiB,CAACC,MAAO,IAAIvB,OAAQ,MAChEwB,EAAYT,EAAOU,YACvBV,EAAOW,OAAP,eAAAC,EAAAlD,OAAAmD,EAAA,EAAAnD,CAAAoD,EAAAhC,EAAAiC,KAAc,SAAAC,EAAeC,GAAf,IAAAC,EAAAC,EAAAC,EAAA,OAAAN,EAAAhC,EAAAuC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACNN,EAAW,IAAIO,UAIVC,OAAO,OAAOtB,EAAKjC,MAAME,KAAKA,MAEvCsD,EAAA7C,EAAM8C,QAAQ,qBAAO,IAAO,WACxBC,QAAQC,IAAI,uBARNR,EAAAE,KAAA,EAWOO,MAAM,cAAc,CACjCC,OAAO,OACPC,QAAQ,GACRC,KAAKhB,IAdC,cAWNC,EAXMG,EAAAa,KAAAb,EAAAE,KAAA,EAgBeL,EAAKiB,OAhBpB,OAgBNhB,EAhBME,EAAAa,KAmBVR,EAAA7C,EAAMuD,OACNjC,EAAK5C,MAAMgB,QAAQC,KAAK,CAACC,SAAS,UAAUC,MAAM,CAAC8B,UAAUA,EAAU6B,QAAQlB,EAAapB,UApBlF,yBAAAsB,EAAAiB,SAAAvB,MAAd,gBAAAwB,GAAA,OAAA5B,EAAA6B,MAAA7E,KAAA8E,YAAA,uIAwBK,IAAAC,EAAA/E,KACL,OACIiB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,OAAO,SAChBJ,EAAAC,EAAAC,cAAC6D,EAAA9D,EAAD,CACI+D,IAAKjF,KAAKO,MAAMuB,OAChBoD,IAAI,UAEJ9D,MAAO,CAACC,OAAOrB,KAAKO,MAAMc,QAG1B8D,SAAU,EACVC,gBAAgB,EAChBC,kBAAkB,EAClBC,SAAU,OACVC,YAAa,IAEjBtE,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACXL,EAAAC,EAAAC,cAAAqE,EAAAtE,EAAA,CAAQuE,QAAM,EAACC,QAAS,WAAKX,EAAKnF,MAAMgB,QAAQC,KAAK,CAACC,SAAS,aAA/D,gBACAG,EAAAC,EAAAC,cAAAqE,EAAAtE,EAAA,CAAQuE,QAAM,EAACC,QAAS,kBAAIX,EAAKY,WAAjC,0BArEgBhE,IAAMC,oiBCsD/BgE,EA5BA,CACX,CACIC,KAAM,IACNC,UAAWnG,EACXoG,OAAO,GAYX,CACIF,KAAM,WACNC,UAAWjE,GAEf,CACIgE,KAAM,UACNC,kDChDJ,SAAAE,EAAYpG,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgG,IACfnG,EAAAI,EAAAC,KAAAF,KAAMJ,IACDW,MAAQ,CACT0F,UAAU,GACV5E,OAAO,EACPqD,QAAQ,IALG7E,mEASZG,KAAKJ,MAAMmC,SAAShB,MACnBf,KAAKK,SAAS,CAAC4F,UAAWjG,KAAKJ,MAAMmC,SAAShB,MAAM8B,UAAU6B,QAAS1E,KAAKJ,MAAMmC,SAAShB,MAAM2D,QAAQrD,OAAOgB,OAAOC,cAEvHtC,KAAKK,SAALP,OAAAoG,EAAA,EAAApG,CAAA,GAAkBE,KAAKJ,MAAMmC,SAASxB,oDAI1C,GAAGP,KAAKJ,MAAMmC,SAAShB,MAAM,CACzB,IAAI2D,EAAU1E,KAAKJ,MAAMmC,SAAShB,MAAM2D,QAExCT,QAAQC,IAAIQ,GACZ1E,KAAKJ,MAAMgB,QAAQuF,QAAQ,UAA3BrG,OAAAoG,EAAA,EAAApG,CAAA,GAA0CE,KAAKO,MAA/C,CAAqD0F,UAAWjG,KAAKJ,MAAMmC,SAAShB,MAAM8B,UAAU6B,QAASA,EAAQrD,OAAOgB,OAAOC,iDAIlI,IAAAtB,EAAAhB,KACL,OACIiB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAAiF,EAAAlF,EAAA,CACImF,KAAK,QACLC,KAAMrF,EAAAC,EAAAC,cAAAoF,EAAArF,EAAA,CAAMK,KAAK,SACjBiF,YAAa,kBAAMxF,EAAKpB,MAAMgB,QAAQC,KAAK,CAACC,SAAS,aAHzD,4BAIIG,EAAAC,EAAAC,cAAA,OAAKG,UAAU,YAAYF,MAAO,CAACqF,gBAAe,OAAAC,OAAQ1G,KAAKO,MAAM0F,UAAnB,KAAgC5E,OAAyB,IAAlBrB,KAAKO,MAAMc,UAGpGJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAAwF,EAAAzF,EAAA,CACI0F,UAAU,EACVC,UAAQ,EACRC,MAAM,EACN1F,MAAO,CAACC,OAA8B,KAAtBrB,KAAKO,MAAMc,OAAO,MAM1BrB,KAAKO,MAAMmE,QAAQqC,IAAI,SAAAC,GAaX,OAAO/F,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SAASlB,IAAK4G,EAAK5F,MAAO,CAACC,OAA8B,IAAtBL,EAAKT,MAAMc,OAAO,MACnEJ,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,OAAO,SAChBJ,EAAAC,EAAAC,cAAA,KAAGC,MAAO,CAAC6F,OAAQ,UAAnB,mDAAqChG,EAAAC,EAAAC,cAAA,QAAMG,UAAU,SAAS0F,EAAIxF,OAClEP,EAAAC,EAAAC,cAAA,oCAAOF,EAAAC,EAAAC,cAAA,QAAMG,UAAU,SAAS0F,EAAIE,sBA9D5DvF,IAAMC,YDkDpC,CACEiE,KAAM,SACNC,UAAWnG,2BE5CCwH,QACW,cAA7B9E,OAAON,SAASqF,UAEe,UAA7B/E,OAAON,SAASqF,UAEhB/E,OAAON,SAASqF,SAASC,MACvB,2DCNNC,IAASC,OAAQtG,EAAAC,EAAAC,cAACqG,EAAA,EAAD,KAAgBC,YAAa7B,IAA0B8B,SAASC,eAAe,SDqH1F,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0380df2d.chunk.js","sourcesContent":["import React from 'react';\n// import {Modal} from 'antd-mobile';\n\nexport default class Photo extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            // modal:JSON.parse(localStorage.getItem(\"tipShow\")) || false\n        }\n    }\n    onClose = key => () => {\n        this.setState({\n          [key]: true,\n        });\n    }\n    photo(e) {\n        // debugger\n        // 获取当前选中的文件\n        if (e) {\n            let file = e.target.files[0];\n            // debugger\n            // console.log(file,e.target.value)\n            // 检查文件类型\n            // // 图片压缩之旅\n            // if (file.type) {\n            //     this.props.dispatch({\n            //         type: 'picture/updateState',\n            //         payload: { file: file }\n            //     })\n            // }\n            // this.transformFileToDataUrl(file);\n            \n            this.props.history.push({pathname:'/Cropper',query:{file:file}})\n        }\n\n    }\n    render() {\n        return (\n            <div style={{height:\"100%\"}}>\n                <div className=\"widthFix\">\n                    {/* <NavBar\n                        mode=\"light\"\n                        // icon={<Icon type=\"left\" />}\n                        // onLeftClick={() => console.log('onLeftClick')}\n                        // rightContent={[\n                        //     <i className=\"am-icon book\" key={'book'} onClick={()=>{this.props.history.push({pathname:'/Baike'})}}></i>\n                        // ]}\n                        >拍照识别</NavBar> */}\n                        <div  className=\"bg \"></div>\n                        <p className=\"tip\">基于神经网络技术，\n                        </p>\n                        <p className=\"tip\">实现茶树典型病害远程推理、诊断</p>\n                        {/* <div className=\"discribe-info\">\n                            <p>中草药智能识别</p>\n                            <div className=\"leaf\"></div>\n                        </div> */}\n                    \n                        {/* <div className=\"btn-box\" onClick={() => this.photo()}>\n                            <label>\n                                <input className=\"picture\" type=\"file\" name=\"image\" onChange={(e) => this.photo(e)} /> */}\n                                \n                                <div className=\"choose-btn\">\n                                    <input className=\"picture\" type=\"file\" name=\"image\" onChange={(e) => this.photo(e)} />\n                                    拍 照 识 茶\n                                    {/* <img className=\"choose-btn-add\" src={require(\"../../assets/photo.png\")} alt=\"logo\"/> */}\n                                </div>\n                            {/* </label>\n                        </div> */}\n                    </div>\n                    \n                \n                {/* <Modal \n                    style={{minWidth: '90%'}}\n                    visible={!this.state.modal}\n                    transparent\n                    maskClosable={false}\n                    onClose={this.onClose('modal')}\n                    title=\"如何提高识别准确率\"   \n                    footer={[{ text: '不再提示', onPress: () => {this.onClose('modal')(); localStorage.setItem(\"tipShow\",\"true\");console.log(JSON.parse(localStorage.getItem(\"tipShow\")))} },\n                    { text: '我明白了', onPress: () => {this.onClose('modal')(); } }]}\n                    wrapProps={{ onTouchStart: this.onWrapTouchStart }}\n                    afterClose={() => { alert('afterClose'); }}\n                    >\n                    <div style={{overflow: 'auto'}}>\n                        请对准中草药拍照<br/>\n                        保持良好的光照，并保持一段距离<br/><br/>\n                        示例图片：<br/>\n                    <div className=\"leafExp\"></div>\n                    <img src={require(\"../../assets/leaf.jpg\")} alt=\"示例图片\"></img>\n                    </div>\n                </Modal> */}\n            </div>\n        )\n    }\n}","import React from 'react';\nimport Cropper from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\nimport {Button,Toast} from 'antd-mobile';\n\nexport default class CropperPic extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            imgSrc:null,\n            height:0,\n            file:null\n        }\n    }\n    componentDidMount() {\n        if(this.props.location.query){\n            const fileReader = new FileReader()\n            fileReader.onload = (e) => {\n            const dataURL = e.target.result\n            this.setState({imgSrc: dataURL,height:window.innerHeight-47,file:this.props.location.query})\n            }\n            fileReader.readAsDataURL(this.props.location.query.file)\n        }else{\n            this.props.history.push({pathname:'/'})\n        }\n        \n    }\n    async submit(){\n        let that = this;\n        let result = this.refs.cropper.getCroppedCanvas({width: 299,height: 299});\n        let resultpic = result.toDataURL();\n        result.toBlob(async function(blob) {\n            let formData = new FormData();\n            // let test = new Date().getTime()+\".png\";\n            // debugger\n            // formData.append(\"file\",blob,test);\n            formData.append(\"file\",that.state.file.file);\n            \n            Toast.loading('识别中', 50000, () => {\n                console.log('Load complete !!!');\n              });\n            //上传\n            let resp = await fetch(\"/app/upload\",{\n                method:\"POST\",\n                headers:{},\n                body:formData\n            })\n            let responseJson = await resp.json();\n            // let responseJson = {\"code\": 0, \"result\": [{\"label_id\": \"7\", \"name\": \"茶树炭疽病\", \"score\": \"75.18%\"}, {\"label_id\": \"4\", \"name\": \"茶叶叶枯病\",\n            // \"score\": \"20.29%\"}, {\"label_id\": \"8\", \"name\": \"茶苗白绢病\", \"score\": \"4.13%\"}]}\n            Toast.hide();\n            that.props.history.push({pathname:'/Result',query:{resultpic:resultpic,results:responseJson.result}})\n          });\n        \n    }\n    render() {\n        return (\n            <div>\n                <div style={{height:'100%'}}>\n                    <Cropper\n                        src={this.state.imgSrc}\n                        ref=\"cropper\"\n                        // src={require(\"../../assets/timg.jpg\")}\n                        style={{height:this.state.height}}\n                        // className=\"company-logo-cropper\"\n                        // ref={cropper => this.cropper = cropper}\n                        viewMode={1} \n                        cropBoxMovable={false}\n                        cropBoxResizable={false}\n                        dragMode={'move'}\n                        aspectRatio={1/1}\n                    />\n                    <div className=\"clBtn\">\n                        <Button inline onClick={()=>{this.props.history.push({pathname:'/Photo'})}}>取消</Button>\n                        <Button inline onClick={()=>this.submit()}>确定</Button>\n                    </div>\n                    \n                </div>\n                \n            </div>\n        )\n    }\n}","// import React from 'react';\n// import {BrowserRouter as Router, Route, Switch,withRouter} from 'react-router-dom';\n\nimport Photo from './Photo/Photo';\n// import Baike from './Baike/Baike';\nimport CropperPic from './Cropper/Cropper';\nimport Result from './Result/Result'\n// import Detail from './Detail/Detail'\n\n// const getRouter = () => (\n//     <Router>\n//         <div className=\"App\">\n//             {/* <ul>\n//                 <li><Link to=\"/\">首页</Link></li>\n//                 <li><Link to=\"/Photo\">Page1</Link></li>\n//             </ul> */}\n//             <Switch>\n//                 <Route exact path=\"/\" component={Photo}/>\n//                 <Route path=\"/Photo\" component={Photo}/>\n//                 <Route path=\"/Baike\" component={Baike}/>\n//                 <Route path=\"/Cropper\" component={CropperPic}/>\n//                 <Route path=\"/Result\" component={Result}/>\n//                 <Route path=\"/Detail\" component={Detail}/>\n//             </Switch>\n//         </div>\n//     </Router>\n// );\n\n// export default getRouter;\n\n\nconst routes = [\n    {\n        path: '/',\n        component: Photo,\n        exact: true,\n    },\n    // {\n    //     path: '/Baike',\n    //     component: Baike,\n    //     children: [\n    //         {\n    //             path: '/Baike/Detail',\n    //             component: Detail\n    //         }\n    //     ]\n    // },\n    {\n        path: '/Cropper',\n        component: CropperPic\n    },\n    {\n        path: '/Result',\n        component: Result\n    },{\n        path: '/Photo',\n        component: Photo\n    },\n];\nexport default routes","import React from 'react';\nimport {NavBar, Icon, Carousel} from 'antd-mobile';\n// import knowledgeBase from '../../assets/illness.json'\n\nexport default class Result extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            resultPic:'',\n            height:0,\n            results:[]\n        }\n    }\n    componentWillMount(){\n        if(this.props.location.query){\n            this.setState({resultPic: this.props.location.query.resultpic,results: this.props.location.query.results,height:window.innerHeight});\n        }else{\n            this.setState({...this.props.location.state})\n        }\n    }\n    componentDidMount() {\n        if(this.props.location.query){\n            let results = this.props.location.query.results;\n            // results.push({else:true})\n            console.log(results);\n            this.props.history.replace('/Result', {...this.state,resultPic: this.props.location.query.resultpic,results: results,height:window.innerHeight});\n        }\n        \n    }\n    render() {\n        return (\n            <div>\n                <NavBar\n                    mode=\"light\"\n                    icon={<Icon type=\"left\" />}\n                    onLeftClick={() => this.props.history.push({pathname:'/Photo'})}>识别结果</NavBar>\n                    <div className=\"resultPic\" style={{backgroundImage:`url(${this.state.resultPic})`,height:this.state.height*0.35}}>\n                        {/* <img src={require(\"../../assets/timg.jpg\")} style={{width:\"90%\",height:\"90%\",margin:\"10px auto\"}}></img> */}\n                    </div>\n                    <div>\n                        <Carousel\n                            autoplay={false}\n                            infinite\n                            dots={true}\n                            style={{height:(this.state.height-45)*0.55}}\n\n                            // beforeChange={(from, to) => console.log(`slide from ${from} to ${to}`)}\n                            // afterChange={index => console.log('slide to', index)}\n                            >\n                                {   \n                                    this.state.results.map(val => {\n                                        // if(!val.else){\n                                            // if(val.detail && !val.detail.healthy){\n                                            //     return <div className=\"clCard\" key={val} style={{height:(this.state.height-45)*0.5}} >\n                                            //             <div style={{height:\"1rem\"}}>   \n                                            //                 <p>中草药名称：<span className=\"green\">{val.name}</span></p>\n                                            //                 <p>可能性：<span className=\"green\">{val.score}</span></p>\n                                            //             </div>\n                                            //             <div className={`${val.imgName} plant leaf`} onClick={()=>this.detail(val.detail)}>\n                                            //                 <p className=\"det\">点击查看详情</p>\n                                            //             </div>\n                                            //         </div>\n                                            // }else{\n                                                return <div className=\"clCard\" key={val} style={{height:(this.state.height-45)*0.5}}>\n                                                        <div style={{height:\"1rem\"}}>   \n                                                            <p style={{margin: '15% 0'}}>茶叶病虫害名称：<span className=\"green\">{val.name}</span></p>\n                                                            <p>可能性：<span className=\"green\">{val.score}</span></p>\n                                                        </div>\n                                                        {/* <p className={`${val.class} plant leaf`}></p> */}\n                                                    </div>\n                                        //     }\n                                            \n                                        // }else{\n                                            // return <div key={val} className=\"knowledge clCard\" style={{height:(this.state.height-45)*0.5}} onClick={()=>{this.props.history.push({pathname:'/Baike'})}}>\n                                            //             {/* <p>没有你想要的结果?</p> */}\n                                            //             <div className=\"plant leaf\" style={{backgroundImage:`url(${this.state.resultPic})`,marginTop:'1rem'}}>\n                                            //                 <p className=\"noDet\">以上结果都不对</p>\n                                            //             </div>\n                                            //             {/* <div className=\"btn\">\n                                            //                 <Button type=\"ghost\"  icon={<img src={require('../../assets/icon_doc.png')} alt=\"\" />}inline size=\"small\">病虫害知识库</Button>                                                        </div> */}\n                                            //         </div>\n                                        // }\n                                    })\n                                }\n                        </Carousel>\n                    </div>\n            </div>\n            \n        )\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport routes  from './routes/router';\nimport { BrowserRouter } from 'react-router-dom';\nimport { renderRoutes } from 'react-router-config';\n\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\n// document.body.addEventListener('touchmove', function (e) {\n//     e.preventDefault(); \n// }, {passive: false}); \nReactDOM.render( <BrowserRouter>{renderRoutes(routes)}</BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}